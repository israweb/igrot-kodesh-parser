#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∏—Å–µ–º –∏–∑ —Ç–æ–º–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
"""

import sys
import os
import re
sys.path.append('../main')

from letters_downloader import LettersDownloader
import time
from bs4 import BeautifulSoup


class VolumeCompletenessTest:
    def __init__(self):
        self.downloader = LettersDownloader(download_dir="test_completeness", headless=True)
        self.hebrew_to_number = {
            '◊ê': 1, '◊ë': 2, '◊í': 3, '◊ì': 4, '◊î': 5, '◊ï': 6, '◊ñ': 7, '◊ó': 8, '◊ò': 9, '◊ô': 10,
            '◊ô◊ê': 11, '◊ô◊ë': 12, '◊ô◊í': 13, '◊ô◊ì': 14, '◊ò◊ï': 15, '◊ò◊ñ': 16, '◊ô◊ñ': 17, '◊ô◊ó': 18, '◊ô◊ò': 19, '◊õ': 20,
            '◊õ◊ê': 21, '◊õ◊ë': 22, '◊õ◊í': 23, '◊õ◊ì': 24, '◊õ◊î': 25, '◊õ◊ï': 26, '◊õ◊ñ': 27, '◊õ◊ó': 28, '◊õ◊ò': 29, '◊ú': 30,
            '◊ú◊ê': 31, '◊ú◊ë': 32, '◊ú◊í': 33, '◊ú◊ì': 34, '◊ú◊î': 35, '◊ú◊ï': 36, '◊ú◊ñ': 37, '◊ú◊ó': 38, '◊ú◊ò': 39, '◊û': 40,
            '◊û◊ê': 41, '◊û◊ë': 42, '◊û◊í': 43, '◊û◊ì': 44, '◊û◊î': 45, '◊û◊ï': 46, '◊û◊ñ': 47, '◊û◊ó': 48, '◊û◊ò': 49, '◊†': 50,
            '◊†◊ê': 51, '◊†◊ë': 52, '◊†◊í': 53, '◊†◊ì': 54, '◊†◊î': 55, '◊†◊ï': 56, '◊†◊ñ': 57, '◊†◊ó': 58, '◊†◊ò': 59, '◊°': 60,
            '◊°◊ê': 61, '◊°◊ë': 62, '◊°◊í': 63, '◊°◊ì': 64, '◊°◊î': 65, '◊°◊ï': 66, '◊°◊ñ': 67, '◊°◊ó': 68, '◊°◊ò': 69, '◊¢': 70,
            '◊¢◊ê': 71, '◊¢◊ë': 72, '◊¢◊í': 73, '◊¢◊ì': 74, '◊¢◊î': 75, '◊¢◊ï': 76, '◊¢◊ñ': 77, '◊¢◊ó': 78, '◊¢◊ò': 79, '◊§': 80,
            '◊§◊ê': 81, '◊§◊ë': 82, '◊§◊í': 83, '◊§◊ì': 84, '◊§◊î': 85, '◊§◊ï': 86, '◊§◊ñ': 87, '◊§◊ó': 88, '◊§◊ò': 89, '◊¶': 90,
            '◊¶◊ê': 91, '◊¶◊ë': 92, '◊¶◊í': 93, '◊¶◊ì': 94, '◊¶◊î': 95, '◊¶◊ï': 96, '◊¶◊ñ': 97, '◊¶◊ó': 98, '◊¶◊ò': 99, '◊ß': 100,
            '◊ß◊ê': 101, '◊ß◊ë': 102, '◊ß◊í': 103, '◊ß◊ì': 104, '◊ß◊î': 105, '◊ß◊ï': 106, '◊ß◊ñ': 107, '◊ß◊ó': 108, '◊ß◊ò': 109, '◊ß◊ô': 110,
            '◊ß◊ô◊ê': 111, '◊ß◊ô◊ë': 112, '◊ß◊ô◊í': 113, '◊ß◊ô◊ì': 114, '◊ß◊ò◊ï': 115, '◊ß◊ò◊ñ': 116, '◊ß◊ô◊ñ': 117, '◊ß◊ô◊ó': 118, '◊ß◊ô◊ò': 119, '◊ß◊õ': 120,
            '◊ß◊õ◊ê': 121, '◊ß◊õ◊ë': 122, '◊ß◊õ◊í': 123, '◊ß◊õ◊ì': 124, '◊ß◊õ◊î': 125, '◊ß◊õ◊ï': 126, '◊ß◊õ◊ñ': 127, '◊ß◊õ◊ó': 128, '◊ß◊õ◊ò': 129, '◊ß◊ú': 130,
            '◊ß◊ú◊ê': 131, '◊ß◊ú◊ë': 132, '◊ß◊ú◊í': 133, '◊ß◊ú◊ì': 134, '◊ß◊ú◊î': 135, '◊ß◊ú◊ï': 136, '◊ß◊ú◊ñ': 137, '◊ß◊ú◊ó': 138, '◊ß◊ú◊ò': 139, '◊ß◊û': 140,
            '◊ß◊û◊ê': 141, '◊ß◊û◊ë': 142, '◊ß◊û◊í': 143, '◊ß◊û◊ì': 144, '◊ß◊û◊î': 145, '◊ß◊û◊ï': 146, '◊ß◊û◊ñ': 147, '◊ß◊û◊ó': 148, '◊ß◊û◊ò': 149, '◊ß◊†': 150,
            '◊ß◊†◊ê': 151, '◊ß◊†◊ë': 152, '◊ß◊†◊í': 153, '◊ß◊†◊ì': 154, '◊ß◊†◊î': 155, '◊ß◊†◊ï': 156, '◊ß◊†◊ñ': 157, '◊ß◊†◊ó': 158, '◊ß◊†◊ò': 159, '◊ß◊°': 160,
            '◊ß◊°◊ê': 161, '◊ß◊°◊ë': 162, '◊ß◊°◊í': 163, '◊ß◊°◊ì': 164, '◊ß◊°◊î': 165, '◊ß◊°◊ï': 166, '◊ß◊°◊ñ': 167, '◊ß◊°◊ó': 168, '◊ß◊°◊ò': 169, '◊ß◊¢': 170,
            '◊ß◊¢◊ê': 171, '◊ß◊¢◊ë': 172, '◊ß◊¢◊í': 173, '◊ß◊¢◊ì': 174, '◊ß◊¢◊î': 175, '◊ß◊¢◊ï': 176, '◊ß◊¢◊ñ': 177, '◊ß◊¢◊ó': 178, '◊ß◊¢◊ò': 179, '◊ß◊§': 180,
            '◊ß◊§◊ê': 181, '◊ß◊§◊ë': 182, '◊ß◊§◊í': 183, '◊ß◊§◊ì': 184, '◊ß◊§◊î': 185, '◊ß◊§◊ï': 186, '◊ß◊§◊ñ': 187, '◊ß◊§◊ó': 188, '◊ß◊§◊ò': 189, '◊ß◊¶': 190,
            '◊ß◊¶◊ê': 191, '◊ß◊¶◊ë': 192, '◊ß◊¶◊í': 193, '◊ß◊¶◊ì': 194, '◊ß◊¶◊î': 195, '◊ß◊¶◊ï': 196, '◊ß◊¶◊ñ': 197, '◊ß◊¶◊ó': 198, '◊ß◊¶◊ò': 199, '◊®': 200,
            '◊®◊ê': 201, '◊®◊ë': 202, '◊®◊í': 203, '◊®◊ì': 204, '◊®◊î': 205, '◊®◊ï': 206, '◊®◊ñ': 207, '◊®◊ó': 208, '◊®◊ò': 209, '◊®◊ô': 210
        }

    def hebrew_number_to_int(self, hebrew_num):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ–≤—Ä–µ–π—Å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∞—Ä–∞–±—Å–∫–æ–µ"""
        if hebrew_num in self.hebrew_to_number:
            return self.hebrew_to_number[hebrew_num]
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∏—Å–µ–ª
        for key, value in sorted(self.hebrew_to_number.items(), key=lambda x: x[1], reverse=True):
            if hebrew_num.startswith(key):
                remaining = hebrew_num[len(key):]
                if remaining in self.hebrew_to_number:
                    return value + self.hebrew_to_number[remaining]
        
        return None

    def extract_expected_letter_count(self, soup, volume_title):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–º–∞
        """
        print(f"üîç –ü–æ–∏—Å–∫ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º –≤ —Ç–æ–º–µ {volume_title}")
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –ø–∏—Å–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text = soup.get_text()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: ◊û◊õ◊™◊ë + –µ–≤—Ä–µ–π—Å–∫–æ–µ —á–∏—Å–ª–æ
        letter_patterns = re.findall(r'◊û◊õ◊™◊ë\s+([◊ê-◊™]+)', text)
        
        if letter_patterns:
            max_number = 0
            max_hebrew = ""
            
            for hebrew_num in letter_patterns:
                number = self.hebrew_number_to_int(hebrew_num)
                if number and number > max_number:
                    max_number = number
                    max_hebrew = hebrew_num
            
            if max_number > 0:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–∏—Å—å–º–∞: ◊û◊õ◊™◊ë {max_hebrew} = {max_number}")
                return max_number
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        number_patterns = re.findall(r'(\d{1,3})\s*(?:letters|–ø–∏—Å–µ–º|◊û◊õ◊™◊ë◊ô◊ù)', text, re.IGNORECASE)
        if number_patterns:
            numbers = [int(n) for n in number_patterns]
            max_num = max(numbers)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {max_num}")
            return max_num
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º")
        return None

    def analyze_pagination_info(self, soup):
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        print("\nüìÑ –ê–Ω–∞–ª–∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:")
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        pagination_info = {}
        
        # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_elements = soup.find_all(['div', 'span'], class_=re.compile(r'pag', re.I))
        for elem in pagination_elements:
            text = elem.get_text(strip=True)
            if text and any(char.isdigit() for char in text):
                print(f"   –≠–ª–µ–º–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {text}")
        
        # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_links = soup.find_all('a', href=re.compile(r'/page/\d+'))
        if page_links:
            page_numbers = []
            for link in page_links:
                match = re.search(r'/page/(\d+)', link['href'])
                if match:
                    page_numbers.append(int(match.group(1)))
            
            if page_numbers:
                max_page = max(page_numbers)
                print(f"   üìë –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ: {max_page}")
                pagination_info['max_page'] = max_page
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "X –∏–∑ Y"
        pattern_info = re.findall(r'(\d+)\s*(?:–∏–∑|of|from)\s*(\d+)', soup.get_text())
        if pattern_info:
            for current, total in pattern_info:
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ: {current} –∏–∑ {total}")
                pagination_info['items_per_page'] = int(total)
        
        return pagination_info

    def test_volume_completeness(self, volume_title="◊õ◊®◊ö ◊ê", expected_count=None):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–º–∞
        
        Args:
            volume_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            expected_count (int): –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
        """
        print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–¢–´ –ü–ê–†–°–ò–ù–ì–ê –¢–û–ú–ê")
        print("=" * 60)
        print(f"üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Ç–æ–º: {volume_title}")
        
        if expected_count:
            print(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º: {expected_count}")
        
        start_url = "https://www.chabad.org/therebbe/article_cdo/aid/4643797/jewish/page.htm"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("\nüîç –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            soup = self.downloader.get_page_with_selenium(start_url)
            if not soup:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–º–∞
            print("üìö –ü–æ–∏—Å–∫ —Ç–æ–º–æ–≤...")
            volume_links = self.downloader.find_volume_links(soup, start_url)
            
            # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ç–æ–º
            target_volume = None
            for volume_info in volume_links:
                if volume_title in volume_info['title']:
                    target_volume = volume_info
                    break
            
            if not target_volume:
                print(f"‚ùå –¢–æ–º '{volume_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–º: {target_volume['title']}")
            print(f"üîó URL: {target_volume['url']}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–º–∞
            print("\nüìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–º–∞...")
            volume_soup = self.downloader.get_page_with_selenium(target_volume['url'])
            if not volume_soup:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–º–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º
            if not expected_count:
                expected_count = self.extract_expected_letter_count(volume_soup, volume_title)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            pagination_info = self.analyze_pagination_info(volume_soup)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø–∏—Å–µ–º
            print(f"\nüìù –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø–∏—Å–µ–º –∏–∑ —Ç–æ–º–∞...")
            print("=" * 60)
            
            start_time = time.time()
            letter_links = self.downloader.find_letter_links(volume_soup, target_volume['url'], target_volume['title'])
            end_time = time.time()
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
            print("=" * 60)
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(letter_links)}")
            
            if expected_count:
                print(f"üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –ø–∏—Å–µ–º: {expected_count}")
                difference = len(letter_links) - expected_count
                
                if difference == 0:
                    print("‚úÖ –ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! –ù–∞–π–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –ø–∏—Å–µ–º, —Å–∫–æ–ª—å–∫–æ –æ–∂–∏–¥–∞–ª–æ—Å—å")
                    success = True
                elif difference > 0:
                    print(f"‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û –ë–û–õ–¨–®–ï: +{difference} –ø–∏—Å–µ–º –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
                    print("   –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
                    success = False
                else:
                    print(f"‚ùå –ù–ê–ô–î–ï–ù–û –ú–ï–ù–¨–®–ï: {difference} –ø–∏—Å–µ–º –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
                    print("   –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–∏—Å—å–º–∞")
                    success = False
            else:
                print("‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
                success = len(letter_links) > 0
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
            if letter_links:
                print(f"\nüìã –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• –ü–ò–°–ï–ú:")
                print("-" * 40)
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
                pages = {}
                for letter in letter_links:
                    page = letter.get('page', 1)
                    if page not in pages:
                        pages[page] = []
                    pages[page].append(letter)
                
                print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages)}")
                for page_num in sorted(pages.keys()):
                    count = len(pages[page_num])
                    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: {count} –ø–∏—Å–µ–º")
                
                # –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
                print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º:")
                for i, letter in enumerate(letter_links[:10], 1):
                    print(f"   {i}. {letter['title']}")
                    print(f"      URL: {letter['url']}")
                
                if len(letter_links) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(letter_links) - 10} –ø–∏—Å–µ–º")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                unique_urls = set(letter['url'] for letter in letter_links)
                if len(unique_urls) != len(letter_links):
                    duplicates = len(letter_links) - len(unique_urls)
                    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
                else:
                    print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 40)
            
            if expected_count and len(letter_links) != expected_count:
                if len(letter_links) < expected_count:
                    print("üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∏—Å–µ–º:")
                    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ö–æ–¥ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–º–∞")
                    print("   - –£–ª—É—á—à–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–∏—Å—å–º–∞")
                    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º")
                elif len(letter_links) > expected_count:
                    print("üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–∏—Å–µ–º:")
                    print("   - –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
                    print("   - –£–ª—É—á—à–∏—Ç–µ –¥–µ—Ç–µ–∫—Ü–∏—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
            else:
                print("üéâ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
            return False
        finally:
            self.downloader.close()

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –ü–ê–†–°–ï–†–ê")
        print("=" * 70)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–º (–∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ —Ç–∞–º 169 –ø–∏—Å–µ–º)
        print("\nüìñ –¢–µ—Å—Ç 1: –¢–æ–º ◊ê (–æ–∂–∏–¥–∞–µ—Ç—Å—è 169 –ø–∏—Å–µ–º)")
        success1 = self.test_volume_completeness("◊õ◊®◊ö ◊ê", expected_count=169)
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥—Ä—É–≥–∏—Ö —Ç–æ–º–æ–≤
        # print("\nüìñ –¢–µ—Å—Ç 2: –¢–æ–º ◊ë")
        # success2 = self.test_volume_completeness("◊õ◊®◊ö ◊ë")
        
        print(f"\nüèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        print(f"üìñ –¢–æ–º ◊ê: {'‚úÖ –ü–†–û–ô–î–ï–ù' if success1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        
        if success1:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´. –ü–∞—Ä—Å–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
        
        return success1


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–¢–´ –ü–ê–†–°–ò–ù–ì–ê –ü–ò–°–ï–ú")
    print("=" * 70)
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∏—Å—å–º–∞ –≤ —Ç–æ–º–µ")
    print("üìä –ú–µ—Ç–æ–¥: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    print("=" * 70)
    
    test = VolumeCompletenessTest()
    
    try:
        success = test.run_comprehensive_test()
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã!")
            exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(2)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(3)


if __name__ == "__main__":
    main()
